{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Flutter Articles","text":"<p>Bem-vindo \u00e0 documenta\u00e7\u00e3o dos artigos Flutter!</p> <p>Acesse os artigos e conte\u00fados diretamente nesta p\u00e1gina.</p>"},{"location":"00%20Objetivos/","title":"Objetivos","text":"<p>Descreva aqui os objetivos do projeto ou documenta\u00e7\u00e3o.</p>"},{"location":"05%20Getting%20Started/","title":"Getting Started","text":"<p>Instru\u00e7\u00f5es iniciais para come\u00e7ar a usar o projeto.</p>"},{"location":"06%20Offline-First/","title":"\ud83d\ude80 Flutter Offline-First na Pr\u00e1tica: O Guia Completo com POO, Patterns e Arquitetura","text":""},{"location":"06%20Offline-First/#o-problema-real","title":"\ud83e\ude7a O Problema Real","text":"<p>Imagine o Dr. Carlos, m\u00e9dico de plant\u00e3o em um hospital no interior. Ele precisa emitir uma nota fiscal no app da cl\u00ednica, mas a internet est\u00e1 oscilando. Se o app falhar, ele perde tempo precioso \u2014 e pode at\u00e9 atrasar o repasse de seus honor\u00e1rios.  </p> <p>\ud83d\udc49 \u00c9 aqui que entra a arquitetura offline-first com Flutter, garantindo que o app funcione mesmo em condi\u00e7\u00f5es ruins de conectividade.</p>"},{"location":"06%20Offline-First/#1-programacao-orientada-a-objetos-poo-aplicada-no-flutter","title":"1. Programa\u00e7\u00e3o Orientada a Objetos (POO) aplicada no Flutter","text":""},{"location":"06%20Offline-First/#conceito","title":"Conceito","text":"<p>POO ajuda a organizar o c\u00f3digo em objetos com responsabilidades claras.</p>"},{"location":"06%20Offline-First/#exemplo","title":"Exemplo","text":"<pre><code>class User {\n  final String id;\n  final String name;\n\n  User(this.id, this.name);\n}\n</code></pre>"},{"location":"06%20Offline-First/#analogia","title":"Analogia","text":"<p>\ud83d\udccc Pense em uma carteira de identidade: ela encapsula (esconde) toda a burocracia por tr\u00e1s, mas te entrega apenas o que importa \u2014 seu nome, sua foto e seu n\u00famero.</p>"},{"location":"06%20Offline-First/#explicacao-linha-a-linha","title":"Explica\u00e7\u00e3o linha a linha","text":"<ul> <li><code>class User</code>: define a entidade.  </li> <li><code>final</code>: imut\u00e1vel, seguran\u00e7a contra mudan\u00e7as acidentais.  </li> <li>Construtor: garante que um <code>User</code> s\u00f3 existe se tiver <code>id</code> e <code>name</code>.  </li> </ul>"},{"location":"06%20Offline-First/#2-modelagem-de-entidades","title":"2. Modelagem de Entidades","text":""},{"location":"06%20Offline-First/#exemplo_1","title":"Exemplo","text":"<pre><code>class DraftInvoice {\n  final String id;\n  final double amount;\n  bool synced;\n\n  DraftInvoice(this.id, this.amount, {this.synced = false});\n}\n</code></pre>"},{"location":"06%20Offline-First/#analogia_1","title":"Analogia","text":"<p>\ud83d\udccc Um rascunho de cheque: voc\u00ea escreve o valor, mas s\u00f3 quando for validado no banco (API) ele se torna oficial.</p>"},{"location":"06%20Offline-First/#3-encapsulamento","title":"3. Encapsulamento","text":""},{"location":"06%20Offline-First/#exemplo_2","title":"Exemplo","text":"<pre><code>class LocalQueueService {\n  final List&lt;DraftInvoice&gt; _queue = [];\n\n  void add(DraftInvoice invoice) =&gt; _queue.add(invoice);\n\n  List&lt;DraftInvoice&gt; get pending =&gt; List.unmodifiable(_queue);\n}\n</code></pre>"},{"location":"06%20Offline-First/#analogia_2","title":"Analogia","text":"<p>\ud83d\udccc Uma caixa fechada: voc\u00ea pode colocar pap\u00e9is (notas), mas s\u00f3 acessa de forma controlada, nunca direto no fundo da caixa.</p>"},{"location":"06%20Offline-First/#4-polimorfismo","title":"4. Polimorfismo","text":""},{"location":"06%20Offline-First/#exemplo_3","title":"Exemplo","text":"<pre><code>abstract class SyncStrategy {\n  Future&lt;void&gt; sync(DraftInvoice invoice);\n}\n\nclass AutoSync implements SyncStrategy {\n  @override\n  Future&lt;void&gt; sync(DraftInvoice invoice) async {\n    // sincroniza automaticamente\n  }\n}\n\nclass ManualSync implements SyncStrategy {\n  @override\n  Future&lt;void&gt; sync(DraftInvoice invoice) async {\n    // depende de a\u00e7\u00e3o do usu\u00e1rio\n  }\n}\n</code></pre>"},{"location":"06%20Offline-First/#analogia_3","title":"Analogia","text":"<p>\ud83d\udccc Um carro com c\u00e2mbio autom\u00e1tico ou manual: a dire\u00e7\u00e3o \u00e9 a mesma, mas a forma de trocar marcha muda conforme a estrat\u00e9gia escolhida.</p>"},{"location":"06%20Offline-First/#5-design-patterns","title":"5. Design Patterns","text":""},{"location":"06%20Offline-First/#repository-pattern","title":"Repository Pattern","text":"<pre><code>class InvoiceRepository {\n  final LocalQueueService local;\n  final ApiService remote;\n\n  InvoiceRepository(this.local, this.remote);\n}\n</code></pre> <p>\ud83d\udccc Biblioteca: voc\u00ea pede um livro (nota), e o bibliotec\u00e1rio decide se pega da prateleira local ou encomenda de fora.</p>"},{"location":"06%20Offline-First/#strategy-pattern","title":"Strategy Pattern","text":"<p>Mostrado acima com <code>SyncStrategy</code>. \ud83d\udccc Motor de carro intercambi\u00e1vel: o mesmo chassi aceita motor el\u00e9trico ou a combust\u00e3o.</p>"},{"location":"06%20Offline-First/#observer-state-management","title":"Observer (State Management)","text":"<pre><code>class InvoiceNotifier extends ChangeNotifier {\n  List&lt;DraftInvoice&gt; invoices = [];\n\n  void add(DraftInvoice invoice) {\n    invoices.add(invoice);\n    notifyListeners();\n  }\n}\n</code></pre> <p>\ud83d\udccc Grupo do WhatsApp: quando algu\u00e9m manda mensagem (nota nova), todos recebem automaticamente.</p>"},{"location":"06%20Offline-First/#6-arquitetura-offline-first","title":"6. Arquitetura Offline-First","text":"<ul> <li>Salvar primeiro localmente </li> <li>Sincronizar com backoff exponencial </li> <li>Marcar stale (desatualizado) at\u00e9 confirma\u00e7\u00e3o  </li> </ul> <p>\ud83d\udccc Exemplo real: Como mandar mensagem no WhatsApp sem internet \u2192 aparece o rel\u00f3gio \u23f3 e s\u00f3 vira check \u2714 quando sincroniza.</p>"},{"location":"06%20Offline-First/#7-comparacao-antes-vs-depois","title":"7. Compara\u00e7\u00e3o Antes vs Depois","text":""},{"location":"06%20Offline-First/#antes-sem-patterns","title":"Antes (sem patterns)","text":"<pre><code>// L\u00f3gica da API dentro da UI\nonPressed: () async {\n  final response = await ApiService().sendInvoice(invoice);\n  if (response.success) {\n    // atualizar UI\n  }\n}\n</code></pre>"},{"location":"06%20Offline-First/#depois-com-patterns","title":"Depois (com patterns)","text":"<pre><code>onPressed: () async {\n  await context.read&lt;InvoiceRepository&gt;().sync(invoice);\n}\n</code></pre> <p>\ud83d\udc49 Resultado: UI mais limpa, test\u00e1vel e resiliente.</p>"},{"location":"06%20Offline-First/#8-erros-comuns","title":"8. Erros Comuns","text":"<ul> <li>\u274c Salvar s\u00f3 local e esquecer de sincronizar  </li> <li>\u274c N\u00e3o marcar dados como stale \u2192 UI engana o usu\u00e1rio  </li> <li>\u274c Retry sem backoff \u2192 flooda a API  </li> </ul>"},{"location":"06%20Offline-First/#9-cheat-sheet-resumo-final","title":"9. Cheat Sheet (Resumo Final)","text":"Conceito Exemplo Flutter Analogia POO <code>class User</code> Carteira de identidade Encapsulamento <code>LocalQueueService</code> Caixa fechada Polimorfismo <code>SyncStrategy</code> C\u00e2mbio manual vs autom\u00e1tico Repository <code>InvoiceRepository</code> Bibliotec\u00e1rio Strategy <code>AutoSync/ManualSync</code> Motor intercambi\u00e1vel Observer <code>ChangeNotifier</code> Grupo do WhatsApp Offline-First Fila local + backoff WhatsApp offline"},{"location":"06%20Offline-First/#10-perguntas-de-entrevista-com-respostas-curtas","title":"10. Perguntas de Entrevista (com respostas curtas)","text":"<ul> <li> <p>Q: Como trataria falta de internet? A: Offline-first \u2192 salva local, retry com backoff, feedback na UI.  </p> </li> <li> <p>Q: Como separar l\u00f3gica de persist\u00eancia da UI? A: Repository Pattern.  </p> </li> <li> <p>Q: Como evitar flooding de API em conex\u00f5es ruins? A: Retry com backoff exponencial.  </p> </li> <li> <p>Q: Como notificar a UI sobre mudan\u00e7as autom\u00e1ticas? A: Observer Pattern (ChangeNotifier, Bloc, Riverpod).  </p> </li> </ul> <p>\ud83d\udca1 Sugest\u00e3o de Pitch na entrevista: </p> <p>\u201cSe o m\u00e9dico perder a internet, meu app continua funcionando. Ele salva a nota localmente, sincroniza depois e avisa na UI o que est\u00e1 atualizado ou n\u00e3o. Isso reduz fric\u00e7\u00e3o e aumenta confian\u00e7a no produto.\u201d</p>"},{"location":"10%20Resultado%20%28Definition%20of%20Done%29/","title":"Resultado (Definition of Done)","text":"<p>Defina aqui o que \u00e9 considerado como \"pronto\" para este projeto.</p>"},{"location":"11%20Ajuda%20r%C3%A1pida%20%28links%20oficiais%29/","title":"Ajuda r\u00e1pida (links oficiais)","text":"<ul> <li>Flutter Docs</li> <li>Dart Docs</li> </ul>"},{"location":"12%20Checklist%20de%20Prontid%C3%A3o/","title":"Checklist de Prontid\u00e3o","text":"<ul> <li>[ ] Item 1</li> <li>[ ] Item 2</li> <li>[ ] Item 3</li> </ul>"},{"location":"15%20Pr%C3%A9-requisitos/","title":"Pr\u00e9-requisitos","text":"<p>Liste aqui os pr\u00e9-requisitos para o projeto.</p>"},{"location":"20%20Estrutura%20White-label%20%26%20Schemes/","title":"Estrutura White-label &amp; Schemes","text":"<p>Descreva aqui a estrutura de white-label e os esquemas utilizados.</p>"},{"location":"30%20Runbook%20%28Release%20manual%29/","title":"Runbook (Release manual)","text":"<p>Passos para realizar um release manual.</p>"},{"location":"40%20Fastlane%20Guide/","title":"Fastlane Guide","text":"<p>Guia para automa\u00e7\u00e3o de builds e deploys usando Fastlane.</p>"}]}